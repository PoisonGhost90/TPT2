#launch (gvg("<size=0%>launch"))
#normal (gvg("<size=0%>normal"))
#endless (gvg("<size=0%>endless"))
#diff.easy (gvg("<size=0%>diff.easy"))
#diff.next (gvg("<size=0%>diff.next"))
#region.next (gvg("<size=0%>region.next"))
#region.prev (gvg("<size=0%>region.prev"))

#convert.click(V) (x({V})/1920.0),(y({V})/1080.0),((x({V})%3.0)/2.0),((y({V})%3.0)/2.0)

#scale.vec(v, d) ({v} * (vec({d}, {d})))

#offsets   ("0000+100+100+100+100+100+100+100+100+100+601-500+601+101+101-700-701+101+101+600-501+101+101+101+101+101+100+202+102+102+102+102-601+702+102+102+102+102+102+102+102+200+103-101-102+303+103+103+103+103+103+103+103+103+103+103+103+202-103+204+104+104+104+104+104+104+104+104+104+104+104+303-204+104+205-104+205+105+105+105+105+105+105+105+105+105+105+105+105+105+100")
#absolutes ("0000010002000300040005000600070008000900000110000101020103011100040105010601120007010801090110011101120113000002010202020302040213010502060207020802090210021102120214000003140113020103020303030403050306030703080309031003110312031402130300040104020403040404050406040704080409041004110414031204130400051404010502050305040505050605070508050905100511051205130514050000")

#get.region(str, idx) (s2i(sub({str}, {idx}, 2), 0))
#get.diff(str, idx) (s2i(sub({str}, {idx} + 2, 2), 0))

#regions (("forest       desert       winter       underground  volcano      highmountain jungle       metallicruinsbeach        ocean        neutral      darkrealm    heaven       universe     chaos        "))
#regions.len ("060606110712061305050709060805")
#diffs ("easy      medium    hard      insane    nightmare impossible")
#diffs.len ("040604060910")
#convert.region(r) (sub({regions}, {r} * 13, s2i(sub({regions.len}, {r} * 2, 2), 13)))
#convert.diff(d) (sub({diffs}, {d} * 10, s2i(sub({diffs.len}, {d} * 2, 2), 10)))

#get.region.str(str, idx) ({convert.region({get.region({str}, {idx})})})
#get.diff.str(str, idx) ({convert.diff({get.diff({str}, {idx})})})

#region.diff.pair(str, idx) {get.region.str({str}, {idx})}, {get.diff.str({str}, {idx})}

#get.highscore.wave(str, idx) (highscore.wave({region.diff.pair({str}, {idx})}))
#get.highscore.era(str, idx) (highscore.era({region.diff.pair({str}, {idx})}))
#get.highscore.inf(str, idx) (highscore.infinity({region.diff.pair({str}, {idx})}))
#get.highscore(str, idx, s) (if({s} == 0, {get.highscore.wave({str}, {idx})}, if({s} == 1, {get.highscore.era({str}, {idx})}, {get.highscore.inf({str}, {idx})})))
#get.goal(s) (if({s} == 0, 100.0, if({s} == 1, 1.0, a.d(10.0, "pow", i2d({s} - 2)))))
#get.current(s) (if({s} == 0, wave(), if({s} == 1, era(), infinity())))

#diff.click ({diff.easy} + {scale.vec({diff.next}, i2d({get.diff({offsets}, idx)} % 6))})

;10 retries and +1 for death logic
#retry.count (10 + 1)

#launcher.condition (({get.highscore({absolutes}, idx, stage)} < {get.goal(stage)}) && (retry < {retry.count}))

#num.selection (360)
#navigate.mod ({num.selection} + 4)
#next.idx.mod ({navigate.mod} + 4)


#deathchk (if(tower.health(false) == 0.0, died, testing))
#metgoal(s, r) ((({get.current({s})} >= {get.goal({s})}) && (if({s} == 0, enemies(), 0) < 1)) || ({r} >= {retry.count}))
#testloop(s, r) (if({metgoal({s}, {r})}, exit, {deathchk}))
#exitchk(s, r) (if(isTowerTesting() == false, end, {testloop({s}, {r})}))

:global int stage
:global int idx
:local int itemp
:local int retry
:local vector diffclick

    key.x()

    isopen("towertesting")

start:
    executesync("goals.crawl:config")

navigate:
    retry = 0
    executesync("goals.crawl:navigate")

checkscore:
  wait(0.0) ;testing wait to check order of things
    goto(if({launcher.condition}, launcher, next.idx))

launcher:
  ;goto(next.idx) ;testing goto to check order of things
    {click.relative({convert.click({launch})})}
    
died:
    retry = (retry + 1)
    restart()

started:
    goto(if((tower.health(false) == 0.0), started, testing))

testing:
    goto({exitchk(stage, retry)})

exit:
    exit()
    show("towertesting", true)
    gotoif(exit, isopen("towertesting") == false)
    
  ;needed wait time for game to catch up
    wait(1.0)

next.idx:
    idx = (idx + 4) % {next.idx.mod}
    gotoif(navigate, idx != 0)

next.stage:
  ;idx = 0
    stage = (stage + 1)
    gotoif(navigate, stage != 0)

end:
    execute("goals.crawl:cleanup")